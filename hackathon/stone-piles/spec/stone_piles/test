(comment
(describe "should get nim-sum"

  (it "paritions of p"
    (should= [[7, 1]
              [6, 2]
              [5, 3]
              [5, 2, 1]
              [4, 3, 1]] (stone-piles.core/s-partition 8)))



(describe "should detect if game is over"
  (it "nothing to split if piles are all 1 or 2"
    (should= true (stone-piles.core/game-over? [1, 2])))

  (it "game not over if piles can still be split"
    (should= false (stone-piles.core/game-over? [1, 3]))))

(describe "should play game"
  (it "nim sum"
    (should= 3 (stone-piles.core/find-nim-sum [3 4 5])))
  (it "bob wins playing 4"
  (let [game {:users ["ALICE", "BOB"], :piles [4]}]
     (should= "BOB" (stone-piles.core/play-game game))))
 (it "alice wins playing  1 3 4"
 (let [game {:users ["ALICE", "BOB"], :piles [1, 3, 4]}]
      (should= "ALICE" (stone-piles.core/play-game game))))
 (it "bob wins playing 8"
  (let [game {:users ["ALICE", "BOB"], :piles [8]}]
   (should= "BOB" (stone-piles.core/play-game game)))))
  (it "bob wins last case"
    (let [game {:users ["ALICE", "BOB"], :piles [30]}]
      (should= "BOB" (stone-piles.core/play-game game))))))

       (comment
        (it "grundy of 1"
          (should= 0 (stone-piles.core/grundy 1)))
        (it "grundy of 2"
          (should= 0 (stone-piles.core/grundy 2)))
        (it "grundy of 3"
          (should= 1 (stone-piles.core/grundy 3)))
        (it "grundy of 4"
          (should= 0 (stone-piles.core/grundy 4)))
        (it "grundy of 5"
          (should= 2 (stone-piles.core/grundy 5)))
        (it "grundy of 6"
          (should= 3 (stone-piles.core/grundy 6)))
         (it "grundy of 7"
          (should= 4 (stone-piles.core/grundy 7)))
        (it "grundy of 8"
          (should= 0 (stone-piles.core/grundy 8))))

          (describe "mex"
            (it "mex of [0 2]"
              (should= 1 (stone-piles.core/mex (set [0 2]))))
            (it "mex of [0 1 33]"
              (should= 2 (stone-piles.core/mex (set [0 1 33]))))
            (it "mex of [2 7 999]"
              (should= 0 (stone-piles.core/mex (set [2 7 999]))))
            (it "mex of [0 1 2 3 4 5 6 7 22]"
              (should= 8 (stone-piles.core/mex (set [0 1 2 3 4 5 6 7 22]))))
            (it "mex of [4 0 2 7 1]"
              (should= 3 (stone-piles.core/mex (set [4 0 2 7 1]))))
            )


            (def grundy-map {0 0
                     1 0
                     2 0
                     3 1
                     4 0
                     5 2
                     6 3
                     7 4
                     8 0
                     9 5
                     10 6
                     11 7
                     12 8
                     13 9
                     14 10
                     15 11
                     16 0
                     17 12
                     18 13
                     19 14
                     20 15
                     21 16
                     22 17
                     23 18
                     24 19
                     25 20
                     26 21
                     27 22
                     28 23
                     29 24
                     30 25
                     31 26
                     32 0
                     33 27
                     34 28
                     35 29
                     36 30
                     37 31
                     38 32
                     39 33
                     40 34
                     41 35
                     42 36
                     43 37
                     44 38
                     45 39
                     46 40
                     47 41
                     48 42
                     49 43
                     50 44
                     })